name: Complete DevSecOps CI-CD pipeline

on:
  push:
    branches:
      - main  # Specify the branch you want to trigger the workflow on

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    name: Run Sonar_Qube with Maven
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven cloud
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=java_app_01 -Dsonar.organization=java_app_01 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARCLOUD_TOKEN
        env:
          GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN}}  # Needed to get PR information, if any
          SONARCLOUD_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        

  sca-scan:
    needs: sast-scan
    runs-on: ubuntu-latest
    name: Maven using Snyk security scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@main
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-image-publish-to-ecr:
    needs: sca-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0' # default is latest stable
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: java-app-01
          IMAGE_TAG: v1
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Login to GitHub Packages
        uses: actions/checkout@v3
        with:
          repository: rahuls512/Java-App-github-actions
          ref: 'main'
        env:
          GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
  
      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v1.7.1
        with:
          repository: javaapp
          tag: ${{ steps.docker-build.outputs.tag }}
      - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

      - name: Update kube config
        run: aws eks update-kubeconfig --name javaapp
    
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

  zap_scan:
    needs: build-image-publish-to-ecr
    runs-on: ubuntu-latest
    name: Scan the web application
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://devopsautomation-with-rahulsharan.link'  # replace with your Registered domain URL
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
